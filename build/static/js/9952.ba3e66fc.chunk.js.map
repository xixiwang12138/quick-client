{"version":3,"file":"static/js/9952.ba3e66fc.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddKeyModal.tsx","screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/KMS/KMSHelpbox.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { Grid, InputBox } from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport KMSHelpBox from \"../../KMS/KMSHelpbox\";\n\ninterface IAddKeyModalProps {\n  closeAddModalAndRefresh: (refresh: boolean) => void;\n  addOpen: boolean;\n}\n\nconst AddKeyModal = ({\n  closeAddModalAndRefresh,\n  addOpen,\n}: IAddKeyModalProps) => {\n  const dispatch = useAppDispatch();\n  const onAddSuccess = () => closeAddModalAndRefresh(true);\n  const onAddError = (err: ErrorResponseHandler) => {\n    closeAddModalAndRefresh(false);\n    dispatch(setErrorSnackMessage(err));\n  };\n  const onClose = () => closeAddModalAndRefresh(false);\n\n  const [addLoading, invokeAddApi] = useApi(onAddSuccess, onAddError);\n  const [keyName, setKeyName] = useState<string>(\"\");\n\n  const onConfirmAdd = () => {\n    invokeAddApi(\"POST\", \"/api/v1/kms/keys/\", { key: keyName });\n  };\n\n  return (\n    <ConfirmDialog\n      title={\"\"}\n      confirmText={\"Create\"}\n      isOpen={addOpen}\n      isLoading={addLoading}\n      onConfirm={onConfirmAdd}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: keyName.indexOf(\" \") !== -1 || keyName === \"\" || addLoading,\n        variant: \"callAction\",\n      }}\n      confirmationContent={\n        <Fragment>\n          <KMSHelpBox\n            helpText={\"Create Key\"}\n            contents={[\n              \"Create a new cryptographic key in the Key Management Service server connected to MINIO.\",\n            ]}\n          />\n\n          <Grid item xs={12} sx={{ marginTop: 15 }}>\n            <InputBox\n              id=\"key-name\"\n              name=\"key-name\"\n              label=\"Key Name\"\n              autoFocus={true}\n              value={keyName}\n              error={\n                keyName.indexOf(\" \") !== -1\n                  ? \"Key name cannot contain spaces\"\n                  : \"\"\n              }\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setKeyName(e.target.value);\n              }}\n            />\n          </Grid>\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default AddKeyModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\n\nimport {\n  AddIcon,\n  Box,\n  BucketEncryptionIcon,\n  Button,\n  FormLayout,\n  Grid,\n  ProgressBar,\n  Select,\n} from \"mds\";\nimport {\n  ApiError,\n  BucketEncryptionInfo,\n  BucketEncryptionType,\n  KmsKeyInfo,\n} from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../../common/SecureComponent\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\nimport AddKeyModal from \"./AddKeyModal\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface IEnableBucketEncryptionProps {\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableBucketEncryption = ({\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableBucketEncryptionProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<\n    BucketEncryptionType | \"disabled\"\n  >(\"disabled\");\n  const [keys, setKeys] = useState<KmsKeyInfo[] | undefined>([]);\n  const [loadingKeys, setLoadingKeys] = useState<boolean>(false);\n  const [addOpen, setAddOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(BucketEncryptionType.SseS3);\n      } else {\n        setEncryptionType(BucketEncryptionType.SseKms);\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID || \"\");\n      }\n    }\n  }, [encryptionCfg]);\n\n  useEffect(() => {\n    if (encryptionType === \"sse-kms\") {\n      api.kms\n        .kmsListKeys()\n        .then((res) => {\n          setKeys(res.data.results);\n          setLoadingKeys(false);\n        })\n        .catch((err) => {\n          setLoadingKeys(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    }\n  }, [encryptionType, loadingKeys, dispatch]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api.buckets\n        .disableBucketEncryption(selectedBucket)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch(async (res) => {\n          const err = (await res.json()) as ApiError;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    } else {\n      api.buckets\n        .enableBucketEncryption(selectedBucket, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n\n        .catch(async (res) => {\n          const err = (await res.json()) as ApiError;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {addOpen && (\n        <AddKeyModal\n          addOpen={addOpen}\n          closeAddModalAndRefresh={(refresh: boolean) => {\n            setAddOpen(false);\n            setLoadingKeys(true);\n          }}\n        />\n      )}\n\n      <ModalWrapper\n        modalOpen={open}\n        onClose={() => {\n          closeModalAndRefresh();\n        }}\n        title=\"Enable Bucket Encryption\"\n        titleIcon={<BucketEncryptionIcon />}\n      >\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            enableBucketEncryption(e);\n          }}\n        >\n          <FormLayout withBorders={false} containerPadding={false}>\n            <Select\n              onChange={(value) => {\n                setEncryptionType(value as BucketEncryptionType | \"disabled\");\n              }}\n              id=\"select-encryption-type\"\n              name=\"select-encryption-type\"\n              label={\"Encryption Type\"}\n              value={encryptionType}\n              options={[\n                {\n                  label: \"Disabled\",\n                  value: \"disabled\",\n                },\n                {\n                  label: \"SSE-S3\",\n                  value: BucketEncryptionType.SseS3,\n                },\n                {\n                  label: \"SSE-KMS\",\n                  value: BucketEncryptionType.SseKms,\n                },\n              ]}\n            />\n            {encryptionType === \"sse-kms\" && (\n              <Box sx={{ display: \"flex\", gap: 10 }} className={\"inputItem\"}>\n                {keys && (\n                  <Select\n                    onChange={(value) => {\n                      setKmsKeyID(value);\n                    }}\n                    id=\"select-kms-key-id\"\n                    name=\"select-kms-key-id\"\n                    label={\"KMS Key ID\"}\n                    value={kmsKeyID}\n                    options={keys.map((key: KmsKeyInfo) => {\n                      return {\n                        label: key.name || \"\",\n                        value: key.name || \"\",\n                      };\n                    })}\n                  />\n                )}\n                <SecureComponent\n                  scopes={[IAM_SCOPES.KMS_IMPORT_KEY]}\n                  resource={CONSOLE_UI_RESOURCE}\n                  errorProps={{ disabled: true }}\n                >\n                  <TooltipWrapper tooltip={\"Add key\"}>\n                    <Button\n                      id={\"import-key\"}\n                      variant={\"regular\"}\n                      icon={<AddIcon />}\n                      onClick={(e) => {\n                        setAddOpen(true);\n                        e.preventDefault();\n                      }}\n                    />\n                  </TooltipWrapper>\n                </SecureComponent>\n              </Box>\n            )}\n            <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n              <Button\n                id={\"cancel\"}\n                type=\"submit\"\n                variant=\"regular\"\n                onClick={() => {\n                  closeModalAndRefresh();\n                }}\n                disabled={loading}\n                label={\"Cancel\"}\n              />\n              <Button\n                id={\"save\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={loading}\n                label={\"Save\"}\n              />\n            </Grid>\n            {loading && (\n              <Grid item xs={12}>\n                <ProgressBar />\n              </Grid>\n            )}\n          </FormLayout>\n        </form>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default EnableBucketEncryption;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpBox, HelpIconFilled, Box } from \"mds\";\n\ninterface IKMSHelpBoxProps {\n  helpText: string;\n  contents: string[];\n}\n\nconst KMSHelpBox = ({ helpText, contents }: IKMSHelpBoxProps) => {\n  return (\n    <HelpBox\n      iconComponent={<HelpIconFilled />}\n      title={helpText}\n      help={\n        <Fragment>\n          {contents.map((content) => (\n            <Box sx={{ paddingBottom: \"20px\" }}>{content}</Box>\n          ))}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default KMSHelpBox;\n"],"names":["_ref","closeAddModalAndRefresh","addOpen","dispatch","useAppDispatch","addLoading","invokeAddApi","useApi","onAddSuccess","err","setErrorSnackMessage","keyName","setKeyName","useState","_jsx","ConfirmDialog","title","confirmText","isOpen","isLoading","onConfirm","onConfirmAdd","key","onClose","confirmButtonProps","disabled","indexOf","variant","confirmationContent","_jsxs","Fragment","children","KMSHelpBox","helpText","contents","Grid","item","xs","sx","marginTop","InputBox","id","name","label","autoFocus","value","error","onChange","e","target","open","encryptionCfg","selectedBucket","closeModalAndRefresh","loading","setLoading","kmsKeyID","setKmsKeyID","encryptionType","setEncryptionType","keys","setKeys","loadingKeys","setLoadingKeys","setAddOpen","useEffect","algorithm","BucketEncryptionType","SseS3","SseKms","kmsMasterKeyID","api","kms","kmsListKeys","then","res","data","results","catch","setModalErrorSnackMessage","errorToHandler","AddKeyModal","refresh","ModalWrapper","modalOpen","titleIcon","BucketEncryptionIcon","noValidate","autoComplete","onSubmit","preventDefault","buckets","disableBucketEncryption","async","json","enableBucketEncryption","encType","FormLayout","withBorders","containerPadding","Select","options","Box","display","gap","className","map","SecureComponent","scopes","IAM_SCOPES","KMS_IMPORT_KEY","resource","CONSOLE_UI_RESOURCE","errorProps","TooltipWrapper","tooltip","Button","icon","AddIcon","onClick","modalStyleUtils","modalButtonBar","type","ProgressBar","HelpBox","iconComponent","HelpIconFilled","help","content","paddingBottom"],"sourceRoot":""}