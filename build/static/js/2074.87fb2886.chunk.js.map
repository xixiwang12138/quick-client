{"version":3,"file":"static/js/2074.87fb2886.chunk.js","mappings":"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","sources":["screens/Console/Groups/DeleteGroup.tsx","screens/Console/Groups/AddGroupMember.tsx","screens/Console/Groups/GroupsDetails.tsx","screens/Console/Groups/UsersSelectors.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport useApi from \"../Common/Hooks/useApi\";\n\ninterface IDeleteGroup {\n  selectedGroups: string[];\n  deleteOpen: boolean;\n  closeDeleteModalAndRefresh: any;\n}\n\nconst DeleteGroup = ({\n  selectedGroups,\n  deleteOpen,\n  closeDeleteModalAndRefresh,\n}: IDeleteGroup) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => {\n    dispatch(setErrorSnackMessage(err));\n    closeDeleteModalAndRefresh(false);\n  };\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedGroups) {\n    return null;\n  }\n  const onDeleteGroups = () => {\n    for (let group of selectedGroups) {\n      invokeDeleteApi(\"DELETE\", `/api/v1/group/${encodeURLString(group)}`);\n    }\n  };\n\n  const renderGroups = selectedGroups.map((group) => (\n    <div key={group}>\n      <b>{group}</b>\n    </div>\n  ));\n\n  return (\n    <ConfirmDialog\n      title={`Delete Group${selectedGroups.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onDeleteGroups}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the following{\" \"}\n          {selectedGroups.length === 1 ? \"\" : selectedGroups.length} group\n          {selectedGroups.length > 1 ? \"s?\" : \"?\"}\n          {renderGroups}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteGroup;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ntype UserPickerModalProps = {\n  title?: string;\n  preSelectedUsers?: string[];\n  selectedGroup?: string;\n  open: boolean;\n  onClose: () => void;\n  onSaveClick: () => void;\n  groupStatus?: string;\n};\n\nconst AddGroupMember = ({\n  title = \"\",\n  groupStatus = \"enabled\",\n  preSelectedUsers = [],\n  selectedGroup = \"\",\n  open,\n  onClose,\n}: UserPickerModalProps) => {\n  const dispatch = useAppDispatch();\n  const [selectedUsers, setSelectedUsers] = useState(preSelectedUsers);\n\n  function addMembersToGroup() {\n    return api.group\n      .updateGroup(encodeURLString(selectedGroup), {\n        members: selectedUsers,\n        status: groupStatus,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        onClose();\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={onClose}\n      title={title}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <ReadBox label={`Selected Group`} sx={{ width: \"100%\" }}>\n          {selectedGroup}\n        </ReadBox>\n        <UsersSelectors\n          selectedUsers={selectedUsers}\n          setSelectedUsers={setSelectedUsers}\n          editMode={!selectedGroup}\n        />\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-add-group-member\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={() => {\n            setSelectedUsers(preSelectedUsers);\n          }}\n          label={\"Reset\"}\n        />\n\n        <Button\n          id={\"save-add-group-member\"}\n          type=\"button\"\n          variant=\"callAction\"\n          onClick={() => {\n            addMembersToGroup();\n          }}\n          label={\"Save\"}\n        />\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default AddGroupMember;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  GroupsIcon,\n  IAMPoliciesIcon,\n  PageLayout,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Group } from \"api/consoleApi\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  createGroupPermissions,\n  editGroupMembersPermissions,\n  enableDisableGroupPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  setGroupPoliciesPermissions,\n  viewPolicyPermissions,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { decodeURLString, encodeURLString } from \"../../../common/utils\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport SetPolicy from \"../Policies/SetPolicy\";\nimport AddGroupMember from \"./AddGroupMember\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport SearchBox from \"../Common/SearchBox\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nexport const formatPolicy = (policy: string = \"\"): string[] => {\n  if (policy.length <= 0) return [];\n  return policy.split(\",\");\n};\n\nconst GroupsDetails = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const [groupDetails, setGroupDetails] = useState<Group>({});\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [usersOpen, setUsersOpen] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [memberFilter, setMemberFilter] = useState<string>(\"\");\n  const [currentTab, setCurrentTab] = useState<string>(\"members\");\n\n  const groupName = decodeURLString(params.groupName || \"\");\n\n  const { members = [], policy = \"\", status: groupEnabled } = groupDetails;\n\n  const filteredMembers = members.filter((elementItem) =>\n    elementItem.includes(memberFilter),\n  );\n\n  const viewUser = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewUserPermissions,\n    true,\n  );\n\n  useEffect(() => {\n    dispatch(setHelpName(\"group_details\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (groupName) {\n      fetchGroupInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groupName]);\n\n  const groupPolicies = formatPolicy(policy);\n  const isGroupEnabled = groupEnabled === \"enabled\";\n  const memberActionText = members.length > 0 ? \"Edit Members\" : \"Add Members\";\n\n  const getGroupDetails = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    getGroupPermissions,\n  );\n\n  const canEditGroupMembers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    editGroupMembersPermissions,\n    true,\n  );\n\n  const canSetPolicies = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    setGroupPoliciesPermissions,\n    true,\n  );\n\n  const canViewPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewPolicyPermissions,\n    true,\n  );\n\n  function fetchGroupInfo() {\n    if (getGroupDetails) {\n      api.group\n        .groupInfo(encodeURLString(groupName))\n        .then((res) => {\n          setGroupDetails(res.data);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setGroupDetails({});\n        });\n    }\n  }\n\n  function toggleGroupStatus(nextStatus: boolean) {\n    return api.group\n      .updateGroup(encodeURLString(groupName), {\n        members: members,\n        status: nextStatus ? \"enabled\" : \"disabled\",\n      })\n      .then(() => {\n        fetchGroupInfo();\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  const groupsTabContent = (\n    <Box\n      onMouseMove={() => {\n        dispatch(setHelpName(\"groups_members\"));\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: 10,\n            }}\n          >\n            <SearchBox\n              placeholder={\"Search members\"}\n              onChange={(searchText) => {\n                setMemberFilter(searchText);\n              }}\n              value={memberFilter}\n              sx={{\n                maxWidth: 280,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={addUserToGroupPermissions}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  canEditGroupMembers\n                    ? memberActionText\n                    : permissionTooltipHelper(\n                        createGroupPermissions,\n                        \"edit Group membership\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-user-group\"}\n                  label={memberActionText}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    setUsersOpen(true);\n                  }}\n                  disabled={!canEditGroupMembers}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Members\n      </SectionTitle>\n      <Grid item xs={12}>\n        <SecureComponent\n          resource={CONSOLE_UI_RESOURCE}\n          scopes={listUsersPermissions}\n          errorProps={{ disabled: true }}\n        >\n          <TooltipWrapper\n            tooltip={\n              viewUser\n                ? \"\"\n                : permissionTooltipHelper(\n                    viewUserPermissions,\n                    \"view User details\",\n                  )\n            }\n          >\n            <DataTable\n              itemActions={[\n                {\n                  type: \"view\",\n                  onClick: (userName) => {\n                    navigate(`${IAM_PAGES.USERS}/${encodeURLString(userName)}`);\n                  },\n                  isDisabled: !viewUser,\n                },\n              ]}\n              columns={[{ label: \"Access Key\" }]}\n              selectedItems={[]}\n              isLoading={false}\n              records={filteredMembers}\n              entityName=\"Users\"\n            />\n          </TooltipWrapper>\n        </SecureComponent>\n      </Grid>\n    </Box>\n  );\n\n  const policiesTabContent = (\n    <Fragment>\n      <Box\n        onMouseMove={() => {\n          dispatch(setHelpName(\"groups_policies\"));\n        }}\n      >\n        <SectionTitle\n          separator\n          sx={{ marginBottom: 15 }}\n          actions={\n            <TooltipWrapper\n              tooltip={\n                canSetPolicies\n                  ? \"Set Policies\"\n                  : permissionTooltipHelper(\n                      setGroupPoliciesPermissions,\n                      \"assign Policies\",\n                    )\n              }\n            >\n              <Button\n                id={\"set-policies\"}\n                label={`Set Policies`}\n                variant=\"callAction\"\n                icon={<IAMPoliciesIcon />}\n                onClick={() => {\n                  setPolicyOpen(true);\n                }}\n                disabled={!canSetPolicies}\n              />\n            </TooltipWrapper>\n          }\n        >\n          Policies\n        </SectionTitle>\n      </Box>\n      <Grid item xs={12}>\n        <TooltipWrapper\n          tooltip={\n            canViewPolicy\n              ? \"\"\n              : permissionTooltipHelper(\n                  viewPolicyPermissions,\n                  \"view Policy details\",\n                )\n          }\n        >\n          <DataTable\n            itemActions={[\n              {\n                type: \"view\",\n                onClick: (policy) => {\n                  navigate(`${IAM_PAGES.POLICIES}/${encodeURLString(policy)}`);\n                },\n                isDisabled: !canViewPolicy,\n              },\n            ]}\n            columns={[{ label: \"Policy\" }]}\n            isLoading={false}\n            records={groupPolicies}\n            entityName=\"Policies\"\n          />\n        </TooltipWrapper>\n      </Grid>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {policyOpen ? (\n        <SetPolicy\n          open={policyOpen}\n          selectedGroups={[groupName]}\n          selectedUser={null}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            fetchGroupInfo();\n            dispatch(setSelectedPolicies([]));\n          }}\n        />\n      ) : null}\n\n      {usersOpen ? (\n        <AddGroupMember\n          selectedGroup={groupName}\n          onSaveClick={() => {}}\n          title={memberActionText}\n          groupStatus={groupEnabled}\n          preSelectedUsers={members}\n          open={usersOpen}\n          onClose={() => {\n            setUsersOpen(false);\n            fetchGroupInfo();\n          }}\n        />\n      ) : null}\n\n      {deleteOpen && (\n        <DeleteGroup\n          deleteOpen={deleteOpen}\n          selectedGroups={[groupName]}\n          closeDeleteModalAndRefresh={(isDelSuccess: boolean) => {\n            setDeleteOpen(false);\n            if (isDelSuccess) {\n              navigate(IAM_PAGES.GROUPS);\n            }\n          }}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Groups\"}\n              onClick={() => navigate(IAM_PAGES.GROUPS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <ScreenTitle\n            icon={\n              <Fragment>\n                <GroupsIcon width={40} />\n              </Fragment>\n            }\n            title={groupName}\n            subTitle={null}\n            bottomBorder\n            actions={\n              <Box\n                sx={{\n                  display: \"flex\",\n                  fontSize: 14,\n                  alignItems: \"center\",\n                  gap: 15,\n                }}\n              >\n                <span>Group Status:</span>\n                <span id=\"group-status-label\" style={{ fontWeight: \"bold\" }}>\n                  {isGroupEnabled ? \"Enabled\" : \"Disabled\"}\n                </span>\n                <TooltipWrapper\n                  tooltip={\n                    hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      enableDisableGroupPermissions,\n                      true,\n                    )\n                      ? \"\"\n                      : permissionTooltipHelper(\n                          enableDisableGroupPermissions,\n                          \"enable or disable Groups\",\n                        )\n                  }\n                >\n                  <SecureComponent\n                    resource={CONSOLE_UI_RESOURCE}\n                    scopes={enableDisableGroupPermissions}\n                    errorProps={{ disabled: true }}\n                    matchAll\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={isGroupEnabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        toggleGroupStatus(!isGroupEnabled);\n                      }}\n                      switchOnly\n                    />\n                  </SecureComponent>\n                </TooltipWrapper>\n\n                <TooltipWrapper tooltip={\"Delete Group\"}>\n                  <Button\n                    id={\"delete-user-group\"}\n                    variant=\"secondary\"\n                    icon={<TrashIcon />}\n                    onClick={() => {\n                      setDeleteOpen(true);\n                    }}\n                  />\n                </TooltipWrapper>\n              </Box>\n            }\n            sx={{ marginBottom: 15 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Tabs\n            options={[\n              {\n                tabConfig: { id: \"members\", label: \"Members\" },\n                content: groupsTabContent,\n              },\n              {\n                tabConfig: { id: \"policies\", label: \"Policies\" },\n                content: policiesTabContent,\n              },\n            ]}\n            currentTabOrPath={currentTab}\n            onTabClick={setCurrentTab}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\n\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <ProgressBar />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["_ref","selectedGroups","deleteOpen","closeDeleteModalAndRefresh","dispatch","useAppDispatch","deleteLoading","invokeDeleteApi","useApi","onDelSuccess","err","setErrorSnackMessage","renderGroups","map","group","_jsx","children","ConfirmDialog","title","concat","length","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onDeleteGroups","encodeURLString","onClose","confirmationContent","_jsxs","Fragment","groupStatus","preSelectedUsers","selectedGroup","open","selectedUsers","setSelectedUsers","useState","ModalWrapper","modalOpen","AddMembersToGroupIcon","FormLayout","withBorders","containerPadding","ReadBox","label","sx","width","UsersSelectors","editMode","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","api","updateGroup","members","status","then","catch","setModalErrorSnackMessage","errorToHandler","error","formatPolicy","policy","arguments","undefined","split","GroupsDetails","navigate","useNavigate","params","useParams","groupDetails","setGroupDetails","policyOpen","setPolicyOpen","usersOpen","setUsersOpen","setDeleteOpen","memberFilter","setMemberFilter","currentTab","setCurrentTab","groupName","decodeURLString","groupEnabled","filteredMembers","filter","elementItem","includes","viewUser","hasPermission","CONSOLE_UI_RESOURCE","viewUserPermissions","useEffect","setHelpName","fetchGroupInfo","groupPolicies","isGroupEnabled","memberActionText","getGroupDetails","getGroupPermissions","canEditGroupMembers","editGroupMembersPermissions","canSetPolicies","setGroupPoliciesPermissions","canViewPolicy","viewPolicyPermissions","groupInfo","res","data","groupsTabContent","Box","onMouseMove","SectionTitle","separator","marginBottom","actions","display","gap","SearchBox","placeholder","onChange","searchText","value","maxWidth","SecureComponent","resource","scopes","addUserToGroupPermissions","errorProps","disabled","TooltipWrapper","tooltip","permissionTooltipHelper","createGroupPermissions","icon","AddIcon","listUsersPermissions","DataTable","itemActions","userName","IAM_PAGES","USERS","isDisabled","columns","selectedItems","records","entityName","policiesTabContent","IAMPoliciesIcon","POLICIES","SetPolicy","selectedUser","closeModalAndRefresh","setSelectedPolicies","AddGroupMember","onSaveClick","DeleteGroup","isDelSuccess","GROUPS","PageHeaderWrapper","BackLink","HelpMenu","PageLayout","ScreenTitle","GroupsIcon","subTitle","bottomBorder","fontSize","alignItems","style","fontWeight","enableDisableGroupPermissions","matchAll","Switch","indicatorLabels","checked","name","nextStatus","switchOnly","TrashIcon","Tabs","options","tabConfig","content","currentTabOrPath","onTabClick","setRecords","loading","setFilter","fetchUsers","useCallback","users","listUsers","get","sort","usersSort","selUsers","filteredRecords","accessKey","className","ProgressBar","elementKey","onSelect","e","targetD","target","elements","push","element","idField","customPaperHeight","textAlign","padding","noTitle","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","policySort","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","groupPolicy","userPolicy","join","PolicySelectors","resetSelection","color","setPolicyAction","groups","a","b","stringSort","policyDetailsSort"],"sourceRoot":""}